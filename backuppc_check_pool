#!/bin/bash

# This is a helper Bash script to verify the checksum of files in a BackupPC V4
# installation. The latest version of the script can be found at
# https://github.com/guille2306/backuppc_check_pool.
#
# Copyright (C) 2020 Guillermo Rozas. 
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program (see the COPYING file). If not, see
# https://www.gnu.org/licenses/.

# Options:
# -------
# This is an external file that saves the last sub-folder of the cpool that was
# checked by the script. It must be initialized before the first run, usually
# to "00".
dir_file="last_check_dir_file"
# This is the base folder for the cpool files. The script will check the files
# located at "$base_pool_folder/cpool"
dir_base="base_pool_folder"
# This is the number of sub-folders the script will check during each run
dir_run=4
# This selects the method to use for the standard check. Possible values are
# zlib, pigz, and zcat. Possible errors encountered when using zlib and pigz
# will be re-checked using zcat
check_method="zlib"

# Script:
# -------
dir_num=$(cat "$dir_file")
#echo "$dir_num"
i=1
while [ $i -le $dir_run ]; do
  dir_num=$(echo "obase=16;ibase=16; $dir_num + 2" | bc)
  if [ "$dir_num" == "100" ]; then
    dir_num="00"
  fi
  if [ "${#dir_num}" -eq 1 ]; then
    dir_num="0""$dir_num"
  fi
  dir="$dir_base""/cpool/""$(echo $dir_num | tr '[:upper:]' '[:lower:]')"
  #echo "$dir_num"
  echo ""
  date
  echo "$dir"
  find "$dir"* -type f -print0 | while read -d $'\0' file; do
    [ -e "$file" ] || continue
    filename=$(basename "$file")
    if [ "$filename" == "LOCK" ] || [ "$filename" == "poolCnt" ]; then
      continue
    fi
    #echo "f: ""$filename"
    if [ "$check_method" == "zcat" ]; then
      checksum=$(/usr/local/BackupPC/bin/BackupPC_zcat "$file" | md5sum -b | cut -d' ' -f1)
    else
      if [ "$check_method" == "pigz" ]; then
        checksum=$(pigz -dc "$file" | md5sum -b | cut -d' ' -f1)
      else
        checksum=$(zlib-flate -uncompress < "$file" | md5sum -b | cut -d' ' -f1)
      fi
      #echo "c: ""$checksum"
      if [ "$checksum" != "$filename" ]; then
        echo "ZLIB/PIGZ ERROR: ""$filename"" -> ""$checksum"
        checksum=$(/usr/local/BackupPC/bin/BackupPC_zcat "$file" | md5sum -b | cut -d' ' -f1)
      fi
    fi
    #echo "c: ""$checksum"
    if [ "$checksum" != "$filename" ]; then
      echo "CHECKSUM ERROR: ""$filename"" -> ""$checksum"
    fi
  done
  echo "$dir_num" > "$dir_file"
  i=$(($i+1))
done
